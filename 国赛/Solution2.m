%以(45,0）点在系统旋转前后的不同坐标表示求解每次的旋转角度构建方程组


%统计数据
%Data=[ 106 104 101	99	97	95	93	92	90	88	86	84	83	81	80	78	77	75	74	73	72	71	70	68	68	67	66	65	64	64	63	62	62	61	61	61	61	60	60	60	60	60	60	60	62	61	61	62	62	63	63	64	65	65	66	67	68	69	70	71	72	74	75	76	78	79	80	82	84	85	87	89	91	92	94	96];

%统计实际距离
% Xpoint=[44.44748	43.61414	43.33636	42.50302	41.94746	41.3919	40.83634	40.003	39.44744	38.6141	38.05854	37.50298	36.66964	35.8363	35.28074	34.4474	33.61406	33.0585	32.50294	31.94738	31.6696	31.11404	30.55848	30.00292	29.72514	29.16958	28.61402	28.05846	27.5029	26.66956	26.114	25.28066	24.7251	23.89176	22.78064	22.22508	21.39174	20.5584	19.72506	18.89172	18.05838	16.94726	16.11392	15.0028	13.89168	13.05834	12.225	11.11388	9.72498	8.0583	6.6694	5.2805	4.16938	2.78048	1.1138	-0.2751	-1.94178	-3.33068	-4.71958	-6.10848	-7.49738	-8.88628	-10.55296	-11.66408	-12.7752	-13.60854	-14.71966	-15.553	-16.38634	-17.21968	-18.05302	-18.88636	-19.7197	-20.55304	-21.38638	-22.21972	-23.05306	-23.8864	-24.71974	-25.55308	-26.38642	-27.21976	-28.0531	-28.88644	-29.71978	-30.55312	-31.38646	-31.94202	-32.49758	-33.33092	-33.88648	-34.44204	-34.9976	-35.27538	-35.83094	-36.3865	-36.94206	-37.7754	-38.33096	-39.1643	-39.71986	-40.27542	-40.5532	-41.10876	-41.66432	-42.21988	-43.05322	-43.60878	-44.16434	-44.7199	-45.27546	-45.55324	-46.1088	-46.66436	-47.21992	-47.77548	-48.05326	-48.60882	-48.8866	-49.44216	-49.71994	-50.2755	-50.55328	-50.83106	-51.10884	-51.38662	-51.6644	-52.21996	-52.21996	-52.49774	-52.77552	-53.0533	-53.33108	-53.33108	-53.60886	-53.88664	-53.88664	-54.16442	-54.16442	-54.16442	-54.16442	-54.4422	-54.4422	-54.4422	-54.4422	-54.4422	-54.4422	-54.4422	-53.88664	-54.16442	-54.16442	-53.88664	-53.88664	-53.60886	-53.60886	-53.33108	-53.0533	-53.0533	-52.77552	-52.49774	-52.21996	-51.94218	-51.6644	-51.38662	-51.10884	-50.55328	-50.2755	-49.99772	-49.44216	-49.16438	-48.8866	-48.33104	-47.77548	-47.4977	-46.94214	-46.38658	-45.83102	-45.55324	-44.99768	-44.44212];

%拟合数据
%N_data=[105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180];

%拟合实际距离
% N_xpoint=[45.712	44.8549	44.5692	43.7121	43.1407	42.5693	41.9979	41.1408	40.5694	39.7123	39.1409	38.5695	37.7124	36.8553	36.2839	35.4268	34.5697	33.9983	33.4269	32.8555	32.5698	31.9984	31.427	30.8556	30.5699	29.9985	29.4271	28.8557	28.2843	27.4272	26.8558	25.9987	25.4273	24.5702	23.4274	22.856	21.9989	21.1418	20.2847	19.4276	18.5705	17.4277	16.5706	15.4278	14.285	13.4279	12.5708	11.428	9.9995	8.2853	6.8568	5.4283	4.2855	2.857	1.1428	-0.2857	-1.9999	-3.4284	-4.8569	-6.2854	-7.7139	-9.1424	-10.8566	-11.9994	-13.1422	-13.9993	-15.1421	-15.9992	-16.8563	-17.7134	-18.5705	-19.4276	-20.2847	-21.1418	-21.9989	-22.856	-23.7131	-24.5702	-25.4273	-26.2844	-27.1415	-27.9986	-28.8557	-29.7128	-30.5699	-31.427	-32.2841	-32.8555	-33.4269	-34.284	-34.8554	-35.4268	-35.9982	-36.2839	-36.8553	-37.4267	-37.9981	-38.8552	-39.4266	-40.2837	-40.8551	-41.4265	-41.7122	-42.2836	-42.855	-43.4264	-44.2835	-44.8549	-45.4263	-45.9977	-46.5691	-46.8548	-47.4262	-47.9976	-48.569	-49.1404	-49.4261	-49.9975	-50.2832	-50.8546	-51.1403	-51.7117	-51.9974	-52.2831	-52.5688	-52.8545	-53.1402	-53.7116	-53.7116	-53.9973	-54.283	-54.5687	-54.8544	-54.8544	-55.1401	-55.4258	-55.4258	-55.7115	-55.7115	-55.7115	-55.7115	-55.9972	-55.9972	-55.9972	-55.9972	-55.9972	-55.9972	-55.9972	-55.4258	-55.7115	-55.7115	-55.4258	-55.4258	-55.1401	-55.1401	-54.8544	-54.5687	-54.5687	-54.283	-53.9973	-53.7116	-53.4259	-53.1402	-52.8545	-52.5688	-51.9974	-51.7117	-51.426	-50.8546	-50.5689	-50.2832	-49.7118	-49.1404	-48.8547	-48.2833	-47.7119	-47.1405	-46.8548	-46.2834	-45.712];



%方程组构建
%=================================替换==================================
Xpoint=[44.44748	43.61414	43.33636	42.50302	41.94746	41.3919	40.83634	40.003	39.44744	38.6141	38.05854	37.50298	36.66964	35.8363	35.28074	34.4474	33.61406	33.0585	32.50294	31.94738	31.6696	31.11404	30.55848	30.00292	29.72514	29.16958	28.61402	28.05846	27.5029	26.66956	26.114	25.28066	24.7251	23.89176	22.78064	22.22508	21.39174	20.5584	19.72506	18.89172	18.05838	16.94726	16.11392	15.0028	13.89168	13.05834	12.225	11.11388	9.72498	8.0583	6.6694	5.2805	4.16938	2.78048	1.1138	-0.2751	-1.94178	-3.33068	-4.71958	-6.10848	-7.49738	-8.88628	-10.55296	-11.66408	-12.7752	-13.60854	-14.71966	-15.553	-16.38634	-17.21968	-18.05302	-18.88636	-19.7197	-20.55304	-21.38638	-22.21972	-23.05306	-23.8864	-24.71974	-25.55308	-26.38642	-27.21976	-28.0531	-28.88644	-29.71978	-30.55312	-31.38646	-31.94202	-32.49758	-33.33092	-33.88648	-34.44204	-34.9976	-35.27538	-35.83094	-36.3865	-36.94206	-37.7754	-38.33096	-39.1643	-39.71986	-40.27542	-40.5532	-41.10876	-41.66432	-42.21988	-43.05322	-43.60878	-44.16434	-44.7199	-45.27546	-45.55324	-46.1088	-46.66436	-47.21992	-47.77548	-48.05326	-48.60882	-48.8866	-49.44216	-49.71994	-50.2755	-50.55328	-50.83106	-51.10884	-51.38662	-51.6644	-52.21996	-52.21996	-52.49774	-52.77552	-53.0533	-53.33108	-53.33108	-53.60886	-53.88664	-53.88664	-54.16442	-54.16442	-54.16442	-54.16442	-54.4422	-54.4422	-54.4422	-54.4422	-54.4422	-54.4422	-54.4422	-53.88664	-54.16442	-54.16442	-53.88664	-53.88664	-53.60886	-53.60886	-53.33108	-53.0533	-53.0533	-52.77552	-52.49774	-52.21996	-51.94218	-51.6644	-51.38662	-51.10884	-50.55328	-50.2755	-49.99772	-49.44216	-49.16438	-48.8866	-48.33104	-47.77548	-47.4977	-46.94214	-46.38658	-45.83102	-45.55324	-44.99768	-44.44212];


for i=1:180
   if(Xpoint(i)>0)
       fprintf('\n\n%%第%d次旋转对应方程组:\n',i);
       fprintf('Result=solve(''%d=(45-x0)*sqrt(1-t%d^2)+(0-y0)*t%d '',\t ''y%d=(x0-45)*t%d+(0-y0)*sqrt(1-t%d^2)'' ,\t''(45-x0)^2+(0-y0)^2=(%d-x0)^2+(y%d-y0)^2'' ,\t ''(%d-45)^2+(y%d-0)^2=2*sqrt((45-x0)^2+(0-y0)^2)*sqrt((%d-45)^2+(y%d-0)^2)*sqrt(1-t%d^2)'' ,\t ''y%d'' ,\t ''t%d '',\t ''x0'' ,\t''y0'' );\n',Xpoint(1,i),i,i,i,i,i,Xpoint(1,i),i,Xpoint(1,i),i,Xpoint(1,i),i,i,i,i);
       fprintf('X%d=Result.x0 \nY%d=Result.y0',i,i); 
   else
       fprintf('\n\n%%第%d次旋转对应方程组:\n',i);
       fprintf('Result=solve(''%d=(45-x0)*sqrt(1-t%d^2)+(0-y0)*t%d '',\t ''y%d=(x0-45)*t%d+(0-y0)*sqrt(1-t%d^2)'' ,\t''(45-x0)^2+(0-y0)^2=(%d-x0)^2+(y%d-y0)^2'' ,\t ''(%d-45)^2+(y%d-0)^2=2*sqrt((45-x0)^2+(0-y0)^2)*sqrt((%d-45)^2+(y%d-0)^2)*sqrt(1-t%d^2)'' ,\t ''y%d'' ,\t ''t%d '',\t ''x0'' ,\t''y0'' );\n',-Xpoint(1,i),i,i,i,i,i,-Xpoint(1,i),i,-Xpoint(1,i),i,-Xpoint(1,i),i,i,i,i);
       fprintf('X%d=Result.x0 \nY%d=Result.y0',i,i);     
   end
end



%方程组构建
% =================================已知旋转中心==================================
Xpoint=[44.44748	43.61414	43.33636	42.50302	41.94746	41.3919	40.83634	40.003	39.44744	38.6141	38.05854	37.50298	36.66964	35.8363	35.28074	34.4474	33.61406	33.0585	32.50294	31.94738	31.6696	31.11404	30.55848	30.00292	29.72514	29.16958	28.61402	28.05846	27.5029	26.66956	26.114	25.28066	24.7251	23.89176	22.78064	22.22508	21.39174	20.5584	19.72506	18.89172	18.05838	16.94726	16.11392	15.0028	13.89168	13.05834	12.225	11.11388	9.72498	8.0583	6.6694	5.2805	4.16938	2.78048	1.1138	-0.2751	-1.94178	-3.33068	-4.71958	-6.10848	-7.49738	-8.88628	-10.55296	-11.66408	-12.7752	-13.60854	-14.71966	-15.553	-16.38634	-17.21968	-18.05302	-18.88636	-19.7197	-20.55304	-21.38638	-22.21972	-23.05306	-23.8864	-24.71974	-25.55308	-26.38642	-27.21976	-28.0531	-28.88644	-29.71978	-30.55312	-31.38646	-31.94202	-32.49758	-33.33092	-33.88648	-34.44204	-34.9976	-35.27538	-35.83094	-36.3865	-36.94206	-37.7754	-38.33096	-39.1643	-39.71986	-40.27542	-40.5532	-41.10876	-41.66432	-42.21988	-43.05322	-43.60878	-44.16434	-44.7199	-45.27546	-45.55324	-46.1088	-46.66436	-47.21992	-47.77548	-48.05326	-48.60882	-48.8866	-49.44216	-49.71994	-50.2755	-50.55328	-50.83106	-51.10884	-51.38662	-51.6644	-52.21996	-52.21996	-52.49774	-52.77552	-53.0533	-53.33108	-53.33108	-53.60886	-53.88664	-53.88664	-54.16442	-54.16442	-54.16442	-54.16442	-54.4422	-54.4422	-54.4422	-54.4422	-54.4422	-54.4422	-54.4422	-53.88664	-54.16442	-54.16442	-53.88664	-53.88664	-53.60886	-53.60886	-53.33108	-53.0533	-53.0533	-52.77552	-52.49774	-52.21996	-51.94218	-51.6644	-51.38662	-51.10884	-50.55328	-50.2755	-49.99772	-49.44216	-49.16438	-48.8866	-48.33104	-47.77548	-47.4977	-46.94214	-46.38658	-45.83102	-45.55324	-44.99768	-44.44212];

%系统的旋转中心p(-9.30634,-5.55604)
for i=1:180
   
    if(Xpoint(i)>0)
       fprintf('\n\n%%第%d次旋转对应方程组:\n',i);
       fprintf('Result=solve(''%d=(45+9.30634)*sqrt(1-t%d^2)+(0+5.55604)*t%d'',\t ''y%d=(-9.30634-45)*t%d+(0+5.55604)*sqrt(1-t%d^2)'',\t ''y%d'',\t''t%d'');\n',Xpoint(1,i),i,i,i,i,i,i,i);
       fprintf('Angle%d=asin(Result.t%d)*(180/pi);',i,i);
    else
       fprintf('\n\n%%第%d次旋转对应方程组:\n',i);
       fprintf('Result=solve(''%d=(45+9.30634)*sqrt(1-t%d^2)+(0+5.55604)*t%d'',\t ''y%d=(-9.30634-45)*t%d+(0+5.55604)*sqrt(1-t%d^2)'',\t ''y%d'',\t''t%d'');\n',-Xpoint(1,i),i,i,i,i,i,i,i);
       fprintf('Angle%d=asin(Result.t%d)*(180/pi);',i,i); 
    end
end

for i=1:180
    fprintf('Angle%d\n',i);
end



for i=1:180
    fprintf('X%d\n',i);
end



for i=1:180
    fprintf('Y%d\n',i);
end
